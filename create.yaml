---
##############
#   INFRA    #
##############
- name: PROVISION HOSTS AND BUILD ANSIBLE HOSTS INVENTORY
  hosts: localhost
  connection: local
  gather_facts: no
  become: no
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: ensure presence of instances and Ansible inventory
      fabiog1901.cockroachdb.cloud_instance:
        state: present
        deployment_id: "{{ deployment_id }}"
        deployment: "{{ deployment }}"
        defaults: "{{ defaults }}"
      register: instances

    - pause:
        minutes: 5
   
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22
        timeout: 180
        sleep: 5
        state: started
      loop: "{{ instances.out }}"

    - name: add instances to inventory groups
      add_host:
        # id
        name: "{{ item.public_ip }}"
        id: "{{ item.id }}"
        
        # locality
        cloud: "{{ item.cloud }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone }}"
        
        # addresses
        public_hostname: "{{ item.public_hostname }}"
        public_ip: "{{ item.public_ip }}"
        private_hostname: "{{ item.private_hostname }}"
        private_ip: "{{ item.private_ip }}"

        # tags
        ansible_user: "{{ item.ansible_user }}"
        groups: "{{ item.inventory_groups }}"
        cluster_name: "{{ item.cluster_name }}"
        group_name: "{{ item.group_name }}"
        extra_vars: "{{ item.extra_vars }}"

      loop: "{{ instances.out }}"
      
  tags:
    - cloud_instance

##############
#  PLATFORM  #
##############
- name: INSTALL MIT KDC CLIENT
  hosts: krb5_client, krb_client
  gather_facts: yes
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: install MIT KDC client
      include_role:
        name: fabiog1901.cockroachdb.krb_client
      when: krb5_realm is defined
  tags:
    - mitkdc
    - krb_client

- name: INSTALL MIT KDC SERVER
  hosts: krb5_server, krb_server
  gather_facts: yes
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: install MIT KDC server
      include_role:
        name: fabiog1901.cockroachdb.krb_server
  tags:
    - mitkdc
    - krb_server

- name: GENERATE COCKROACHDB CERTS
  hosts: localhost
  gather_facts: yes
  become: no
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - include_role:
        name: fabiog1901.cockroachdb.certificates
      when: cockroachdb_secure

  tags:
    - certificates

- name: DEPLOY COCKROACHDB
  hosts: cockroachdb
  gather_facts: yes
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  serial: "{{ (cockroachdb_deployment == 'upgrade') | ternary(1, '100%') }}"
  tasks:
    - include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: "{{ cockroachdb_deployment | default('standard') }}"
  tags:
    - cockroachdb

- name: INSTALL COCKROACHDB-HAPROXY
  hosts: fabiog1901.cockroachdb.haproxy
  gather_facts: yes
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: install HAProxy
      include_role:
        name: fabiog1901.cockroachdb.haproxy
      vars:
        haproxy_group: "{{ groups[cluster_name] | intersect(groups['cockroachdb']) }}"
        haproxy_port: "{{ cockroachdb_port | default('26257') }}"
        haproxy_checkport: "{{ cockroachdb_http_addr_port | default('8080') }}"
        haproxy_serverprefix: cockroach
        haproxy_httpchk: "/health?ready=1"

    - include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: install only

    - name: get the standalone workload binary
      shell: |
        wget https://edge-binaries.cockroachdb.com/cockroach/workload.LATEST -O workload; chmod 755 workload

  tags:
    - haproxy

#################
#  APPLICATION  #
#################
- name: CREATE KERBEROS USERS AND KEYTABS
  hosts: krb5_server
  gather_facts: no
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: create user and keytab in /etc/krb5.keytab
      shell: |
        kadmin.local addprinc -pw cockroach {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].public_ip }}@{{ krb5_realm }}
        kadmin.local addprinc -pw cockroach {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].public_hostname }}@{{ krb5_realm }}
        kadmin.local addprinc -pw cockroach {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].private_ip }}@{{ krb5_realm }}
        kadmin.local addprinc -pw cockroach {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].private_hostname }}@{{ krb5_realm }}

        kadmin.local ktadd {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].public_ip }}@{{ krb5_realm }}
        kadmin.local ktadd {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].public_hostname }}@{{ krb5_realm }}
        kadmin.local ktadd {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].private_ip }}@{{ krb5_realm }}
        kadmin.local ktadd {{ cockroachdb_krbsrvname | default('postgres') }}/{{ hostvars[item].private_hostname }}@{{ krb5_realm }}

      loop: "{{ groups['haproxy'] }}"

    - name: add principals for the database users
      shell: |
        kadmin.local addprinc -pw {{ item.password }} {{ item.name }}@{{ krb5_realm }}
      loop: "{{ krb5_principals }}"
      register: result
      failed_when: result.rc != 0 and 'Principal or policy already exists while creating' not in result.stderr

    - name: Download keytab
      ansible.builtin.fetch:
        src: /etc/krb5.keytab
        dest: /tmp/cockroach.keytab
        flat: yes

- name: COPY KEYTAB TO NODES
  hosts: cockroachdb
  gather_facts: no
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: /tmp/cockroach.keytab
        dest: /var/lib/cockroach/cockroach.keytab
        mode: "0644"
      when: cockroachdb_krb

- name: COPY CRT+KEY TO APP SERVERS
  hosts: app
  gather_facts: no
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: install cockroachdb sql client
      include_role:
        name: fabiog1901.cockroachdb.cockroachdb
      vars:
        cockroachdb_deployment_type: install only

    - name: Copy client key
      ansible.builtin.copy:
        src: "certs/certs/client.{{ item.name }}.key"
        dest: "client.{{ item.name }}.key"
        mode: "0400"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure and item.is_cert
      loop: "{{ dbusers }}"

    - name: Copy client cert
      ansible.builtin.copy:
        src: certs/certs/client.{{ item.name }}.crt
        dest: "client.{{ item.name }}.crt"
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure and item.is_cert
      loop: "{{ dbusers }}"

    - name: Copy ca.crt
      ansible.builtin.copy:
        src: certs/certs/ca.crt
        dest: "ca.crt"
        mode: "0644"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: cockroachdb_secure

- name: SET CLUSTER SETTINGS FOR COCKROACHDB
  hosts: cockroachdb
  gather_facts: no
  become: yes
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: cockroachdb - set hba.conf setting
      run_once: yes
      shell: |
        cockroach sql \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          --host={{ cockroachdb_advertise_addr }} \
          -e "SET cluster setting server.host_based_authentication.configuration = 'host all app all cert-password
          host all all all gss include_realm=0';"
      when: cockroachdb_krb

    - name: cockroachdb - add locations
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          -e "UPSERT INTO system.locations VALUES 
            ('region', 'us-east-1', 37.478397, -76.453077),
            ('region', 'us-east-2', 40.417287, -76.453077),
            ('region', 'us-west-1', 38.837522, -120.895824),
            ('region', 'us-west-2', 43.804133, -120.554201),
            ('region', 'ca-central-1', 56.130366, -106.346771),
            ('region', 'eu-central-1', 50.110922, 8.682127),
            ('region', 'eu-west-1', 53.142367, -7.692054),
            ('region', 'eu-west-2', 51.507351, -0.127758),
            ('region', 'eu-west-3', 48.856614, 2.352222),
            ('region', 'ap-northeast-1', 35.689487, 139.691706),
            ('region', 'ap-northeast-2', 37.566535, 126.977969),
            ('region', 'ap-northeast-3', 34.693738, 135.502165),
            ('region', 'ap-southeast-1', 1.352083, 103.819836),
            ('region', 'ap-southeast-2', -33.86882, 151.209296),
            ('region', 'ap-south-1', 19.075984, 72.877656),
            ('region', 'sa-east-1', -23.55052, -46.633309),
            ('region', 'eastasia', 22.267, 114.188),
            ('region', 'southeastasia', 1.283, 103.833),
            ('region', 'centralus', 41.5908, -93.6208),
            ('region', 'eastus', 37.3719, -79.8164),
            ('region', 'eastus2', 36.6681, -78.3889),
            ('region', 'westus', 37.783, -122.417),
            ('region', 'northcentralus', 41.8819, -87.6278),
            ('region', 'southcentralus', 29.4167, -98.5),
            ('region', 'northeurope', 53.3478, -6.2597),
            ('region', 'westeurope', 52.3667, 4.9),
            ('region', 'japanwest', 34.6939, 135.5022),
            ('region', 'japaneast', 35.68, 139.77),
            ('region', 'brazilsouth', -23.55, -46.633),
            ('region', 'australiaeast', -33.86, 151.2094),
            ('region', 'australiasoutheast', -37.8136, 144.9631),
            ('region', 'southindia', 12.9822, 80.1636),
            ('region', 'centralindia', 18.5822, 73.9197),
            ('region', 'westindia', 19.088, 72.868),
            ('region', 'canadacentral', 43.653, -79.383),
            ('region', 'canadaeast', 46.817, -71.217),
            ('region', 'uksouth', 50.941, -0.799),
            ('region', 'ukwest', 53.427, -3.084),
            ('region', 'westcentralus', 40.890, -110.234),
            ('region', 'westus2', 47.233, -119.852),
            ('region', 'koreacentral', 37.5665, 126.9780),
            ('region', 'koreasouth', 35.1796, 129.0756),
            ('region', 'francecentral', 46.3772, 2.3730),
            ('region', 'francesouth', 43.8345, 2.1972),
            ('region', 'us-east1', 33.836082, -81.163727),
            ('region', 'us-east4', 37.478397, -76.453077),
            ('region', 'us-central1', 42.032974, -93.581543),
            ('region', 'us-west1', 43.804133, -120.554201),
            ('region', 'us-west4', 36.1955, -115.1538),
            ('region', 'northamerica-northeast1', 56.130366, -106.346771),
            ('region', 'europe-west1', 50.44816, 3.81886),
            ('region', 'europe-west2', 51.507351, -0.127758),
            ('region', 'europe-west3', 50.110922, 8.682127),
            ('region', 'europe-west4', 53.4386, 6.8355),
            ('region', 'europe-west6', 47.3769, 8.5417),
            ('region', 'europe-north1', 60.5702, 27.1877),
            ('region', 'asia-east1', 24.0717, 120.5624),
            ('region', 'asia-northeast1', 35.689487, 139.691706),
            ('region', 'asia-southeast1', 1.352083, 103.819836),
            ('region', 'australia-southeast1', -33.86882, 151.209296),
            ('region', 'asia-south1', 19.075984, 72.877656),
            ('region', 'asia-southeast2', -6.2075, 106.8449),
            ('region', 'asia-northeast2', 34.8172, 135.4976),
            ('region', 'southamerica-east1', -23.55052, -46.633309);"

    - name: cockroachdb - add license
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          -e "SET CLUSTER SETTING cluster.organization = '{{ cockroachdb_cluster_organization }}';
              SET CLUSTER SETTING enterprise.license = '{{ cockroachdb_enterprise_license }}';"

    - name: cockroachdb - create users
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          -e "CREATE USER {{ item.name }} WITH password {{ (item.password == None )| ternary('NULL' , '\"' + item.password|string + '\"') }};"
      loop: "{{ dbusers }}"
      failed_when: result.rc != 0 and 'already exists' not in result.stderr
      register: result

    - name: cockroachdb - grant admin to users
      run_once: yes
      shell: |
        cockroach sql \
          --host={{ cockroachdb_advertise_addr }} \
          {{ (cockroachdb_secure) | ternary('--certs-dir=/var/lib/cockroach/certs', '--insecure') }} \
          -e "GRANT admin TO {{ item.name }};"
      loop: "{{ dbusers }}"
      when: item.is_admin

#############
#  GROUPS   #
#############
- name: print Ansible inventory for reference
  hosts: localhost
  gather_facts: no
  become: no
  vars_files:
    - config/cockroachdb.yaml
  tasks:
    - name: PRINT GROUPS MAGIC VARIABLE
      debug:
        msg:
          - "{{ groups }}"

    - name: Print Load Balancer details
      debug:
        msg:
          - "LOAD BALANCERS"
          - "-------------------------------------"
          - "{{ hostvars[item].public_ip }}"
          - "{{ hostvars[item].private_ip }}"
          - "{{ hostvars[item].public_hostname }}"
          - "{{ hostvars[item].private_hostname }}"
          - "-"
      loop: "{{ groups['haproxy'] }}"
      when: groups['haproxy'] is defined
